@using ContactManagement.Models
@using MudBlazor
@using Microsoft.EntityFrameworkCore
@using ContactManagement.Components.Shared

@inject IntranetHomeContext dbcontext

<div>
    <MudDataGrid T="Contact" Items="@contacts" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="_quickFilter"
        Hover="true" RowClick="HandleOnRowClick">
        <ToolBarContent>
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => HandleAddContactDrawerButton())">
                Tambah
            </MudButton>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Nama" Title="Nama" />
            <PropertyColumn Property="x => x.Deskripsi" Title="Deskripsi" />
            <PropertyColumn Property="x => x.MultiDeskripsi" Title="Deskripsi Lain" />
            <PropertyColumn Property="x => x.Alamat" Title="Alamat" />
            <PropertyColumn Property="x => x.AlamatLain" Title="Alamat lain" />
            <PropertyColumn Property="x => x.Telpno" Title="Telp No" />
            <PropertyColumn Property="x => x.Faxno" Title="Fax No" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Contact" />
        </PagerContent>

    </MudDataGrid>

    <AddContactDrawer @bind-IsOpen="_addContactDrawerIsOpen" OnContactAdd="LoadContacts" />
    <EditContactDrawer @bind-IsOpen="_editContactDrawerIsOpen" SelectedContact="selectedContact"
        OnContactEdit="LoadContacts" />
</div>

@code {
    private string? searchString;
    private IEnumerable<Contact> contacts = new List<Contact>();
    private bool _addContactDrawerIsOpen;
    private Contact selectedContact = new Contact();
    private bool _editContactDrawerIsOpen;
    protected override async Task OnInitializedAsync()
    {
        await LoadContacts();
    }
    private async Task LoadContacts()
    {
        try
        {
            contacts = await dbcontext.ContactManagemen.ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching contacts: {ex.Message}");
        }
    }
    private void HandleAddContactDrawerButton()
    {
        if (!_addContactDrawerIsOpen) // Only set to true if it's not already open
        {
            _addContactDrawerIsOpen = true;
        }
    }

    private void HandleEditContactDrawerButton()
    {
        if (!_editContactDrawerIsOpen)
        {
            _editContactDrawerIsOpen = true;
        }
    }
    private void HandleOnRowClick(DataGridRowClickEventArgs<Contact> args)
    {
        selectedContact = args.Item;
        HandleEditContactDrawerButton();
    }
    private Func<Contact, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        // Use null conditional operator to avoid NullReferenceException
        if (!string.IsNullOrEmpty(x.Nama) && x.Nama.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (!string.IsNullOrEmpty(x.Deskripsi) && x.Deskripsi.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (!string.IsNullOrEmpty(x.MultiDeskripsi) && x.MultiDeskripsi.Contains(searchString,
    StringComparison.OrdinalIgnoreCase))
            return true;
        if (!string.IsNullOrEmpty(x.Alamat) && x.Alamat.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (!string.IsNullOrEmpty(x.AlamatLain) && x.AlamatLain.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (!string.IsNullOrEmpty(x.Telpno) && x.Telpno.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (!string.IsNullOrEmpty(x.Faxno) && x.Faxno.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
}
