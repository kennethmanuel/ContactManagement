@page "/contact2"
@using ContactManagement.Models
@using MudBlazor
@using Microsoft.EntityFrameworkCore

@inject IntranetHomeContext _context

<MudTable Items="@contacts" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<ContactManageman, bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Contacts</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        @foreach (var heading in headings)
        {
            <MudTh>@heading</MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nama">@context.Nama</MudTd>
        <MudTd DataLabel="Deskripsi">@context.Deskripsi</MudTd>
        <MudTd DataLabel="MultiDeskripsi">@context.MultiDeskripsi</MudTd>
        <MudTd DataLabel="Alamat">@context.Alamat</MudTd>
        <MudTd DataLabel="AlamatLain">@context.AlamatLain</MudTd>
        <MudTd DataLabel="Telpno">@context.Telpno</MudTd>
        <MudTd DataLabel="Hpno">@context.Hpno</MudTd>
        <MudTd DataLabel="Faxno">@context.Faxno</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Value="hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Value="dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Value="striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Value="bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer />
    <div style="min-width:200px;">
        <MudText Class="align-self-center d-inline">Selected: @selectedItem?.Nama</MudText>
    </div>
</div>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString = "";
    private ContactManageman selectedItem = null;

    private IEnumerable<ContactManageman> contacts = new List<ContactManageman>();
    private string[] headings = {
        "Nama",
        "Deskripsi",
        "Deskripsi lain",
        "Contact person",
        "Alamat",
        "Alamat lain",
        "No telp",
        "No HP",
        "Fax"
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            contacts = await _context.ContactManagemen.ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching contacts: {ex.Message}");
        }
    }

    private bool FilterFunc(ContactManageman contact) => FilterFunc(contact, searchString);

    private bool FilterFunc(ContactManageman contact, string searchString)
    {
        if (contact == null) return false; // Handle null contact
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (contact.Nama != null && contact.Nama.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (contact.Deskripsi != null && contact.Deskripsi.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (contact.MultiDeskripsi != null && contact.MultiDeskripsi.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (contact.Alamat != null && contact.Alamat.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (contact.AlamatLain != null && contact.AlamatLain.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (contact.Telpno != null && contact.Telpno.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (contact.Hpno != null && contact.Hpno.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (contact.Faxno != null && contact.Faxno.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}

