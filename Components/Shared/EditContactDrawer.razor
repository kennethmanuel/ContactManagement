@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ContactManagement.Models
@using ContactManagement.Services
@using Microsoft.EntityFrameworkCore
@inject IntranetHomeContext DbContext
@inject ISnackbar Snackbar
@inject IContactService ContactService
@inject IDialogService DialogService

<MudDrawer @bind-Open="@IsOpen" Anchor=Anchor.End Variant="@DrawerVariant.Temporary" OverlayAutoClose="false"
    Width="45%">
    <MudItem>
        <MudIconButton Icon="@Icons.Material.Filled.Close" aria-label="close"
            OnClick="() => HandleDrawerOpenChange(false)" />
    </MudItem>
    <MudItem>
        <MudPaper Class="pa-4">
            <MudForm @ref="_contactForm" @bind-IsValid="@_isValidFormData" @bind-Errors="@_errors">
                <MudTextField T="string" Label="Nama" @bind-Value="@SelectedContact.Nama" />
                <MudTextField T="string" Label="Deskripsi" @bind-Value="@SelectedContact.Deskripsi" />
                <MudTextField T="string" Label="Deskripsi Lain" @bind-Value="@SelectedContact.MultiDeskripsi" />
                <MudTextField T="string" Label="Contact Person" @bind-Value="@SelectedContact.Kontak" />
                <MudTextField T="string" Label="Alamat" @bind-Value="@SelectedContact.Alamat" />
                <MudTextField T="string" Label="Alamat Lain" @bind-Value="@SelectedContact.AlamatLain" />
                <MudTextField T="string" Label="No Telp" @bind-Value="@SelectedContact.Telpno" />
                <MudTextField T="string" Label="No HP" @bind-Value="@SelectedContact.Hpno" />
                <MudTextField T="string" Label="Fax" @bind-Value="@SelectedContact.Faxno" />
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false"
                OnClick="@(()=> HandleEditButtonClick())">
                Save</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" DropShadow="false"
                OnClick="@(()=> HandleDeleteButtonClick())">
                Delete</MudButton>
        </MudPaper>
    </MudItem>
</MudDrawer>

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter] public required Contact SelectedContact { get; set; }
    [Parameter] public EventCallback OnContactEdit { get; set; }
    private bool _isValidFormData;
    private string[] _errors = { };
    private MudForm? _contactForm;
    private async Task HandleDrawerOpenChange(bool isOpen)
    {
        IsOpen = isOpen;
        await IsOpenChanged.InvokeAsync(isOpen);
    }
    private async Task HandleEditButtonClick()
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd;
        try
        {
            if (!_isValidFormData) return;
            await ContactService.UpdateContactAsync(SelectedContact);
            Snackbar.Add("Contact edited successfully!", Severity.Success);
            await OnContactEdit.InvokeAsync(null);
            IsOpen = false;
        }
        catch (DbUpdateConcurrencyException ex)
        {
            Snackbar.Add($"Unhandled DB concurrency exception: {ex.Message}", Severity.Error);
        }

        catch (Exception ex)
        {
            Snackbar.Add($"Unhandled error: {ex.Message}", Severity.Error);
        }
    }
    private async Task HandleDeleteButtonClick()
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd;
        var result = await ShowDeleteDialog();

        if (result.Canceled)
        {
            return;
        }

        try
        {
            if (!_isValidFormData) return;
            await ContactService.DeleteContactAsync(SelectedContact);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to delete contact: {ex.Message}", Severity.Error);
        }
    }

    private async Task<DialogResult> ShowDeleteDialog()
    {
        var parameters = new DialogParameters<Dialog>
{
{ x => x.ContentText, "Do you really want to delete these records? This process cannot be undone." },
{ x => x.ButtonText, "Delete" },
{ x => x.Color, Color.Error }
};

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<Dialog>("Delete", parameters, options);
        var result = await dialog.Result;

        return result;
    }

    private async Task<DialogResult> ShowOverrideConccurencyUpdate()
    {
        var parameters = new DialogParameters<Dialog>
{
{ x => x.ContentText, "There was a change since data was previously updated (Someone have change the data you are currently updating since you you started editing). If you choose override, their changes will be overriden with current edit and their edit will be lost!" },
{ x => x.ButtonText, "Override" },
{ x => x.Color, Color.Error }
};

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<Dialog>("Delete", parameters, options);
        var result = await dialog.Result;

        return result;
    }
}