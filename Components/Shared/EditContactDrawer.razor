@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ContactManagement.Models
@using ContactManagement.Services
@using Microsoft.EntityFrameworkCore
@inject IntranetHomeContext DbContext
@inject ISnackbar Snackbar
@inject IContactService ContactService
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

<MudDrawer @bind-Open="@IsOpen" Anchor=Anchor.End Variant="@DrawerVariant.Temporary" OverlayAutoClose="true"
    Width="50%">
    <MudItem Class="d-flex flex-row-reverse">
        <MudIconButton Icon="@Icons.Material.Filled.Close" aria-label="close"
            OnClick="() => HandleDrawerCloseButton()" />
    </MudItem>
    <MudTabs Outlined="true" Position="Position.Top" Rounded="true" Border="true" ApplyEffectsToContainer="true"
        PanelClass="pa-3">

        <MudTabPanel Text="Edit Contact Data">
            <MudPaper Class="overflow-auto">
                <MudForm @ref="_contactForm" @bind-IsValid="@_isValidFormData" @bind-Errors="@_errors">
                    <MudStack Row="true" StretchItems="StretchItems.All">
                        <MudPaper>
                            <MudTextField T="string" Variant="Variant.Outlined" Margin="Margin.Dense" jabel="Nama"
                                @bind-Value="@SelectedContact.Nama" />
                            <MudTextField T="string" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Deskripsi"
                                @bind-Value="@SelectedContact.Deskripsi" />
                            <MudTextField T="string" Variant="Variant.Outlined" Margin="Margin.Dense"
                                Label="Deskripsi Lain" @bind-Value="@SelectedContact.MultiDeskripsi" />
                            <MudTextField T="string" Variant="Variant.Outlined" Margin="Margin.Dense"
                                Label="Contact Person" @bind-Value="@SelectedContact.Kontak" />
                            <MudTextField T="string" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Alamat"
                                @bind-Value="@SelectedContact.Alamat" AutoGrow />
                            <MudTextField T="string" Variant="Variant.Outlined" Margin="Margin.Dense"
                                Label="Alamat Lain" @bind-Value="@SelectedContact.AlamatLain" AutoGrow />

                        </MudPaper>
                        <MudPaper>
                            <MudTextField T="string" Variant="Variant.Outlined" Margin="Margin.Dense" Label="No Telp"
                                @bind-Value="@SelectedContact.Telpno" AutoGrow />
                            <MudTextField T="string" Variant="Variant.Outlined" Margin="Margin.Dense" Label="No HP"
                                @bind-Value="@SelectedContact.Hpno" AutoGrow />
                            <MudTextField T="string" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Fax"
                                @bind-Value="@SelectedContact.Faxno" AutoGrow />
                        </MudPaper>
                    </MudStack>
                </MudForm>
            </MudPaper>
            <MudPaper Class="pa-2 sticky" Style="bottom: 5px; z-index: 10;">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false"
                    OnClick="@(()=> HandleEditButtonClick())">
                    Save</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" DropShadow="false"
                    OnClick="@(()=> HandleDeleteButtonClick())">
                    Delete</MudButton>
            </MudPaper>
        </MudTabPanel>

        <MudTabPanel Text="Export Contact">
            <MudText>Export Contact</MudText>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Secondary"
                Size="Size.Large" OnClick="@(()=> HandleSaveContactButtonClick())">Save</MudButton>
        </MudTabPanel>


    </MudTabs>
</MudDrawer>

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter] public required Contact SelectedContact { get; set; }
    [Parameter] public EventCallback OnContactEdit { get; set; }
    private bool _isValidFormData;
    private string[] _errors = { };
    private MudForm? _contactForm;

    protected override void OnInitialized()
    {
    }
    private async Task HandleDrawerCloseButton()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(false);
    }
    private async Task HandleEditButtonClick()
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd;
        try
        {
            if (!_isValidFormData) return;
            await ContactService.UpdateContactAsync(SelectedContact);
            Snackbar.Add("Contact edited successfully!", Severity.Success);
            SelectedContact = new Contact();
            await OnContactEdit.InvokeAsync();
            await HandleDrawerCloseButton();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Unhandled error: {ex.Message}", Severity.Error);
        }
    }
    private async Task HandleDeleteButtonClick()
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd;
        var result = await ShowDeleteDialog();

        if (result.Canceled)
        {
            return;
        }

        try
        {
            if (!_isValidFormData) return;
            await ContactService.DeleteContactAsync(SelectedContact);
            Snackbar.Add("Contact deleted successfully!", Severity.Success);
            await OnContactEdit.InvokeAsync();
            await HandleDrawerCloseButton();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to delete contact: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleSaveContactButtonClick()
    {
        // Generate the vCard as a byte array
        byte[] vCardBytes = VCardService.GenerateVCardBasedOnContact();

        // Convert the byte array to Base64 string
        var base64String = Convert.ToBase64String(vCardBytes);
        var url = $"data:text/vcard;base64,{base64String}";

        // Use JavaScript to trigger the download
        await JSRuntime.InvokeVoidAsync("open", url, "_blank");
    }

    private async Task<DialogResult> ShowDeleteDialog()
    {
        var parameters = new DialogParameters<Dialog>
{
{ x => x.ContentText, "Do you really want to delete these records? This process cannot be undone." },
{ x => x.ButtonText, "Delete" },
{ x => x.Color, Color.Error }
};

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<Dialog>("Delete", parameters, options);
        var result = await dialog.Result;

        return result;
    }
}