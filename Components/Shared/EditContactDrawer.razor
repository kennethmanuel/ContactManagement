@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ContactManagement.Models
@using ContactManagement.Services
@inject IntranetHomeContext DbContext
@inject ISnackbar Snackbar
@inject IContactService ContactService

<MudDrawer @bind-Open="@IsDrawerOpen" Anchor=Anchor.End Variant="@DrawerVariant.Temporary" OverlayAutoClose="false"
    Width="45%">
    <MudItem>
        <MudIconButton Icon="@Icons.Material.Filled.Close" aria-label="close"
            OnClick="() => OnDrawerOpenChanged(false)" />
    </MudItem>
    <MudItem>
        <MudPaper Class="pa-4">
            <MudForm @ref="contactForm" @bind-IsValid="@isValidFormData" @bind-Errors="@errors">
                <MudTextField T="string" Label="Nama" @bind-Value="@SelectedContact.Nama" />
                <MudTextField T="string" Label="Deskripsi" @bind-Value="@SelectedContact.Deskripsi" />
                <MudTextField T="string" Label="Deskripsi Lain" @bind-Value="@SelectedContact.MultiDeskripsi" />
                <MudTextField T="string" Label="Contact Person" @bind-Value="@SelectedContact.Kontak" />
                <MudTextField T="string" Label="Alamat" @bind-Value="@SelectedContact.Alamat" />
                <MudTextField T="string" Label="Alamat Lain" @bind-Value="@SelectedContact.AlamatLain" />
                <MudTextField T="string" Label="No Telp" @bind-Value="@SelectedContact.Telpno" />
                <MudTextField T="string" Label="No HP" @bind-Value="@SelectedContact.Hpno" />
                <MudTextField T="string" Label="Fax" @bind-Value="@SelectedContact.Faxno" />
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false"
                OnClick="@(()=> OnEditButtonClick())">
                Save</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" DropShadow="false"
                OnClick="@(()=> OnDeleteButtonClick())">
                Delete</MudButton>
        </MudPaper>
    </MudItem>
</MudDrawer>

@code {
    [Parameter] public bool IsDrawerOpen { get; set; }
    [Parameter] public EventCallback<bool> IsDrawerOpenChanged { get; set; }
    [Parameter] public required Contact SelectedContact { get; set; }
    [Parameter] public EventCallback OnContactSave { get; set; }
    private bool isValidFormData;
    private string[] errors = { };
    private MudForm? contactForm;
    private async Task OnDrawerOpenChanged(bool isOpen)
    {
        IsDrawerOpen = isOpen;
        await IsDrawerOpenChanged.InvokeAsync(isOpen);
    }
    private async Task OnEditButtonClick()
    {
        try
        {
            if (!isValidFormData) return;
            await ContactService.UpdateContactAsync(SelectedContact);
            Snackbar.Add("Contact edited successfully!", Severity.Success);
            await OnContactSave.InvokeAsync(null);
            IsDrawerOpen = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to edit contact: {ex.Message}", Severity.Error);
        }
    }
    private async Task OnDeleteButtonClick()
    {
        try
        {
            if (!isValidFormData) return;
            await ContactService.DeleteContactAsync(SelectedContact);
            Snackbar.Add("Contact deleted successfully!", Severity.Success);
            await OnContactSave.InvokeAsync(null);
            IsDrawerOpen = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to delete contact: {ex.Message}", Severity.Error);
        }
    }
}